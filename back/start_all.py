import subprocess
import sys
import os
import glob
import signal
import time

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
MAX_FILES_COUNT = 10

def count_result_files():
    """
    –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º post_processed_routes_graph_*.json –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ results
    """
    pattern = "results/post_processed_routes_graph_*.json"
    files = glob.glob(pattern)
    return len(files)


def monitor_and_terminate(processes_to_monitor, check_interval=5):
    """
    –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
    
    Args:
        processes_to_monitor: —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        check_interval: –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    """
    while True:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–∏–≤—ã –ª–∏ –µ—â—ë –ø—Ä–æ—Ü–µ—Å—Å—ã
        active_processes = [p for p in processes_to_monitor if p.poll() is None]
        
        if not active_processes:
            print("–í—Å–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ä—É–µ–º—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
            break
        
        # –°—á–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã
        file_count = count_result_files()
        print(f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: {file_count}/{MAX_FILES_COUNT}")
        
        if file_count > MAX_FILES_COUNT:
            print(f"\n‚ö† –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤ ({file_count} > {MAX_FILES_COUNT})")
            print("–ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã script3.py, script4.py –∏ script.js...")
            
            for process in active_processes:
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
                    process.terminate()
                    print(f"‚úì –ü—Ä–æ—Ü–µ—Å—Å {process.pid} –ø–æ–ª—É—á–∏–ª —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
                except Exception as e:
                    print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ {process.pid}: {e}")
            
            # –î–∞—ë–º –ø—Ä–æ—Ü–µ—Å—Å–∞–º –≤—Ä–µ–º—è –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            time.sleep(2)
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
            for process in active_processes:
                if process.poll() is None:
                    try:
                        process.kill()
                        print(f"‚úì –ü—Ä–æ—Ü–µ—Å—Å {process.pid} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω")
                    except Exception as e:
                        print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ {process.pid}: {e}")
            
            break
        
        time.sleep(check_interval)


def run_scripts():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —á–µ—Ç—ã—Ä—ë—Ö Python —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏ –æ–¥–Ω–æ–≥–æ JS —Å–∫—Ä–∏–ø—Ç–∞
    """
    
    # –ü—É—Ç–∏ –∫ —Å–∫—Ä–∏–ø—Ç–∞–º
    python_script_1 = "prep_csv.py"
    python_script_2 = "quant.py"
    python_script_3 = "p_quntun.py"
    python_script_4 = "finily_csv.py"
    js_script = "app.js"
    
    try:
        # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö Python —Å–∫—Ä–∏–ø—Ç–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        print(f"–ó–∞–ø—É—Å–∫ {python_script_1}...")
        result1 = subprocess.run(
            [sys.executable, python_script_1],
            check=True,
            capture_output=True,
            text=True
        )
        print(f"‚úì {python_script_1} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        if result1.stdout:
            print(f"–í—ã–≤–æ–¥: {result1.stdout}")
        print()
        
        print(f"–ó–∞–ø—É—Å–∫ {python_script_2}...")
        result2 = subprocess.run(
            [sys.executable, python_script_2],
            check=True,
            capture_output=True,
            text=True
        )
        print(f"‚úì {python_script_2} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        if result2.stdout:
            print(f"–í—ã–≤–æ–¥: {result2.stdout}")
        print()
        
        # –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–æ–≤ 3, 4 –∏ JS —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
        print(f"–ó–∞–ø—É—Å–∫ {python_script_3} (—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º)...")
        process3 = subprocess.Popen(
            [sys.executable, python_script_3],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        print(f"–ó–∞–ø—É—Å–∫ {python_script_4} (—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º)...")
        process4 = subprocess.Popen(
            [sys.executable, python_script_4],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        print(f"–ó–∞–ø—É—Å–∫ {js_script} (—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º)...")
        process_js = subprocess.Popen(
            ["node", js_script],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        # –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        monitored_processes = [process3, process4, process_js]
        
        print("\nüìä –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–æ–≤...")
        print(f"–õ–∏–º–∏—Ç: {MAX_FILES_COUNT} —Ñ–∞–π–ª–æ–≤\n")
        
        # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        monitor_and_terminate(monitored_processes, check_interval=5)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        stdout3, stderr3 = process3.communicate()
        stdout4, stderr4 = process4.communicate()
        stdout_js, stderr_js = process_js.communicate()
        
        print("\n--- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ---")
        
        if process3.returncode == 0:
            print(f"‚úì {python_script_3} –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"‚ö† {python_script_3} –∑–∞–≤–µ—Ä—à—ë–Ω —Å –∫–æ–¥–æ–º {process3.returncode}")
        if stdout3:
            print(f"–í—ã–≤–æ–¥: {stdout3}")
        if stderr3:
            print(f"–û—à–∏–±–∫–∏: {stderr3}")
        print()
        
        if process4.returncode == 0:
            print(f"‚úì {python_script_4} –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"‚ö† {python_script_4} –∑–∞–≤–µ—Ä—à—ë–Ω —Å –∫–æ–¥–æ–º {process4.returncode}")
        if stdout4:
            print(f"–í—ã–≤–æ–¥: {stdout4}")
        if stderr4:
            print(f"–û—à–∏–±–∫–∏: {stderr4}")
        print()
        
        if process_js.returncode == 0:
            print(f"‚úì {js_script} –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"‚ö† {js_script} –∑–∞–≤–µ—Ä—à—ë–Ω —Å –∫–æ–¥–æ–º {process_js.returncode}")
        if stdout_js:
            print(f"–í—ã–≤–æ–¥: {stdout_js}")
        if stderr_js:
            print(f"–û—à–∏–±–∫–∏: {stderr_js}")
        
        print("\n‚úì –í—Å–µ —Å–∫—Ä–∏–ø—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"\n‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞:")
        print(f"–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {e.returncode}")
        print(f"–û—à–∏–±–∫–∞: {e.stderr}")
        return False
    except FileNotFoundError as e:
        print(f"\n‚úó –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
        return False
    except KeyboardInterrupt:
        print("\n\n‚ö† –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è (Ctrl+C)")
        print("–ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã...")
        for p in [process3, process4, process_js]:
            if p.poll() is None:
                p.terminate()
        return False
    except Exception as e:
        print(f"\n‚úó –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


def run_scripts_parallel():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —á–µ—Ç—ã—Ä—ë—Ö Python —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏ –æ–¥–Ω–æ–≥–æ JS —Å–∫—Ä–∏–ø—Ç–∞
    —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º —Ñ–∞–π–ª–æ–≤
    """
    import concurrent.futures
    import threading
    
    python_script_1 = "prep_csv.py"
    python_script_2 = "quant.py"
    js_script = "app.js"
    python_script_3 = "p_quntun.py"
    python_script_4 = "finily_csv.py"
    
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å
    monitored_processes = {}
    stop_monitoring = threading.Event()
    
    def monitor_files_parallel():
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Ñ–∞–π–ª—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        while not stop_monitoring.is_set():
            file_count = count_result_files()
            print(f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: {file_count}/{MAX_FILES_COUNT}")
            
            if file_count > MAX_FILES_COUNT:
                print(f"\n‚ö† –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤ ({file_count} > {MAX_FILES_COUNT})")
                print("–ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã script3.py, script4.py –∏ script.js...")
                
                for script_name, process in monitored_processes.items():
                    if process and process.poll() is None:
                        try:
                            process.terminate()
                            print(f"‚úì –ü—Ä–æ—Ü–µ—Å—Å {script_name} (PID: {process.pid}) –∑–∞–≤–µ—Ä—à—ë–Ω")
                        except Exception as e:
                            print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ {script_name}: {e}")
                
                stop_monitoring.set()
                break
            
            time.sleep(5)
    
    def run_python_script(script_path):
        if script_path in [python_script_3, python_script_4]:
            # –î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏—Ä—É–µ–º—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º Popen
            process = subprocess.Popen(
                [sys.executable, script_path],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            monitored_processes[script_path] = process
            stdout, stderr = process.communicate()
            return script_path, process.returncode, stdout, stderr
        else:
            result = subprocess.run(
                [sys.executable, script_path],
                capture_output=True,
                text=True
            )
            return script_path, result.returncode, result.stdout, result.stderr
    
    def run_js_script(script_path):
        process = subprocess.Popen(
            ["node", script_path],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        monitored_processes[script_path] = process
        stdout, stderr = process.communicate()
        return script_path, process.returncode, stdout, stderr
    
    try:
        # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        monitor_thread = threading.Thread(target=monitor_files_parallel, daemon=True)
        monitor_thread.start()
        
        with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
            # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            futures = [
                executor.submit(run_python_script, python_script_1),
                executor.submit(run_python_script, python_script_2),
                executor.submit(run_python_script, python_script_3),
                executor.submit(run_python_script, python_script_4),
                executor.submit(run_js_script, js_script)
            ]
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            for future in concurrent.futures.as_completed(futures):
                script_name, returncode, stdout, stderr = future.result()
                if returncode == 0:
                    print(f"‚úì {script_name} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    if stdout:
                        print(f"–í—ã–≤–æ–¥: {stdout}")
                else:
                    print(f"‚ö† {script_name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {returncode}")
                    if stderr:
                        print(f"–û—à–∏–±–∫–∞: {stderr}")
                print()
        
        stop_monitoring.set()
        monitor_thread.join(timeout=1)
        
        print("‚úì –í—Å–µ —Å–∫—Ä–∏–ø—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        return True
        
    except Exception as e:
        print(f"\n‚úó –û—à–∏–±–∫–∞: {e}")
        stop_monitoring.set()
        return False


if __name__ == "__main__":
    # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é results, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs("results", exist_ok=True)
    
    print(f"üìÅ –õ–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {MAX_FILES_COUNT}")
    print(f"üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: results/")
    print(f"üîç –ü–∞—Ç—Ç–µ—Ä–Ω —Ñ–∞–π–ª–æ–≤: post_processed_routes_graph_*.json\n")
    
    # –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:
    
    # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (—Å–∫—Ä–∏–ø—Ç—ã 1-2 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, –∑–∞—Ç–µ–º 3-4 –∏ JS —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º)
    run_scripts()
    
    # –ò–ª–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (–≤—Å–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º)
    # run_scripts_parallel()
