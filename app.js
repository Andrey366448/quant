const axios = require('axios');
const fs = require('fs');
const path = require('path');


class FullyOptimizedQuantumCircuitProcessor {
    constructor() {
        this.inputDir = path.join(__dirname, 'input');
        this.resultsBaseDir = path.join(__dirname, 'results');
        this.isProcessing = false;
        this.processedFiles = new Set();
        this.loadProcessedFiles();
    }


    loadProcessedFiles() {
        try {
            const processedPath = path.join(this.resultsBaseDir, 'processed_files.json');
            if (fs.existsSync(processedPath)) {
                const data = JSON.parse(fs.readFileSync(processedPath, 'utf8'));
                this.processedFiles = new Set(data.files || []);
            }
        } catch (error) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ');
        }
    }


    saveProcessedFiles() {
        try {
            const processedPath = path.join(this.resultsBaseDir, 'processed_files.json');
            const data = {
                files: Array.from(this.processedFiles),
                timestamp: new Date().toISOString()
            };
            fs.writeFileSync(processedPath, JSON.stringify(data, null, 2));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ñ–∞–π–ª–æ–≤:', error.message);
        }
    }


    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä –∏–∑ –º–∞—Å—Å–∏–≤–∞ –≥—Ä–∞—Ñ–æ–≤
    createPairs(graphFolders) {
        const pairs = [];
        for (let i = 0; i < graphFolders.length; i += 2) {
            if (i + 1 < graphFolders.length) {
                pairs.push([graphFolders[i], graphFolders[i + 1]]);
            } else {
                pairs.push([graphFolders[i]]); // –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –µ—Å–ª–∏ –Ω–µ—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            }
        }
        return pairs;
    }


    async startMonitoring() {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –ø–æ–ø–∞—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –í–°–ï–• –≥—Ä–∞—Ñ–æ–≤...');
        console.log('üìÅ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–ø–∫–∏:', this.inputDir);
        console.log('üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤:', this.resultsBaseDir);
        console.log('‚ö° –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –í–°–ï –≥—Ä–∞—Ñ—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ø–æ–ø–∞—Ä–Ω–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ');
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        if (!fs.existsSync(this.inputDir)) {
            fs.mkdirSync(this.inputDir, { recursive: true });
            console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ input –¥–ª—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
        }
        if (!fs.existsSync(this.resultsBaseDir)) {
            fs.mkdirSync(this.resultsBaseDir, { recursive: true });
            console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ quantum_results –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
        }


        this.isProcessing = true;
        
        // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –ø–æ–ª–Ω–æ–π –ø–æ–ø–∞—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        while (this.isProcessing) {
            try {
                await this.processAllGraphsInPairs();
                await this.delay(5000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ:', error.message);
                await this.delay(10000); // –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            }
        }
    }


    stopMonitoring() {
        console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');
        this.isProcessing = false;
        this.saveProcessedFiles();
    }


    async processAllGraphsInPairs() {
        try {
            if (!fs.existsSync(this.inputDir)) {
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä–∞—Ñ—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö
            const availableGraphs = fs.readdirSync(this.inputDir)
                .filter(item => {
                    const itemPath = path.join(this.inputDir, item);
                    return fs.statSync(itemPath).isDirectory() && item.startsWith('graph_');
                })
                .sort((a, b) => {
                    const numA = parseInt(a.replace('graph_', ''));
                    const numB = parseInt(b.replace('graph_', ''));
                    return numA - numB;
                });

            if (availableGraphs.length === 0) {
                console.log('üì≠ –í –ø–∞–ø–∫–µ input –Ω–µ—Ç –ø–∞–ø–æ–∫ graph_N');
                return;
            }

            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –≥—Ä–∞—Ñ–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${availableGraphs.length}`);
            console.log(`üìà –ì—Ä–∞—Ñ—ã: ${availableGraphs.join(', ')}`);

            // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã –∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä–∞—Ñ–æ–≤
            const graphPairs = this.createPairs(availableGraphs);
            console.log(`üîó –°–æ–∑–¥–∞–Ω–æ –ø–∞—Ä –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${graphPairs.length}`);
            
            // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–∞—Ö
            graphPairs.forEach((pair, index) => {
                if (pair.length === 2) {
                    console.log(`   –ü–∞—Ä–∞ ${index + 1}: ${pair[0]} + ${pair[1]} (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)`);
                } else {
                    console.log(`   –ü–∞—Ä–∞ ${index + 1}: ${pair[0]} (–æ–¥–∏–Ω–æ—á–Ω–æ)`);
                }
            });

            let totalProcessed = 0;

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø–∞—Ä—É –≥—Ä–∞—Ñ–æ–≤
            for (let pairIndex = 0; pairIndex < graphPairs.length; pairIndex++) {
                const currentPair = graphPairs[pairIndex];
                console.log(`\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä—ã ${pairIndex + 1}/${graphPairs.length}: [${currentPair.join(', ')}]`);

                const parallelTasks = currentPair.map(graphName => 
                    this.processGraphFolder(graphName)
                );

                // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—É—â–µ–π –ø–∞—Ä—ã
                const pairResults = await Promise.all(parallelTasks);
                const pairProcessed = pairResults.reduce((sum, count) => sum + count, 0);
                totalProcessed += pairProcessed;

                if (pairProcessed > 0) {
                    console.log(`‚úÖ –ü–∞—Ä–∞ ${pairIndex + 1} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${pairProcessed} —Ñ–∞–π–ª–æ–≤`);
                    this.saveProcessedFiles();
                } else {
                    console.log(`‚è≠Ô∏è  –ü–∞—Ä–∞ ${pairIndex + 1} –ø—Ä–æ–ø—É—â–µ–Ω–∞: –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
                }

                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
                if (pairIndex < graphPairs.length - 1) {
                    await this.delay(2000);
                }
            }

            if (totalProcessed > 0) {
                console.log(`\nüéØ –ò–¢–û–ì–û –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ —ç—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏: ${totalProcessed}`);
                console.log(`‚ö° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–∞—Ä –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è: ${graphPairs.length}`);
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–∞—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä–∞—Ñ–æ–≤:', error.message);
        }
    }


    async processGraphFolder(graphFolder) {
        const graphPath = path.join(this.inputDir, graphFolder);
        let processedCount = 0;

        try {
            // –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∞
            const graphResultsDir = path.join(this.resultsBaseDir, graphFolder);
            if (!fs.existsSync(graphResultsDir)) {
                fs.mkdirSync(graphResultsDir, { recursive: true });
            }

            // –ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö JSON —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ –≥—Ä–∞—Ñ–∞
            const jsonFiles = fs.readdirSync(graphPath)
                .filter(file => file.endsWith('.json'))
                .sort();

            if (jsonFiles.length === 0) {
                console.log(`üì≠ [${graphFolder}] –ù–µ—Ç JSON —Ñ–∞–π–ª–æ–≤`);
                return 0;
            }

            console.log(`üìä [${graphFolder}] –ù–∞–π–¥–µ–Ω–æ ${jsonFiles.length} —Ñ–∞–π–ª–æ–≤`);

            for (const jsonFile of jsonFiles) {
                const fileKey = `${graphFolder}/${jsonFile}`;
                
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                if (this.processedFiles.has(fileKey)) {
                    continue;
                }

                const success = await this.processFile(graphFolder, jsonFile, graphResultsDir);
                if (success) {
                    this.processedFiles.add(fileKey);
                    processedCount++;
                    
                    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
                    await this.delay(1000);
                }
            }

            if (processedCount > 0) {
                console.log(`‚úÖ [${graphFolder}] –ó–∞–≤–µ—Ä—à–µ–Ω–æ: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedCount} —Ñ–∞–π–ª–æ–≤`);
            }

        } catch (error) {
            console.error(`‚ùå [${graphFolder}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä–∞—Ñ–∞:`, error.message);
        }

        return processedCount;
    }


    async processFile(graphFolder, jsonFile, graphResultsDir) {
        const configPath = path.join(this.inputDir, graphFolder, jsonFile);
        
        try {
            console.log(`üîç [${graphFolder}] –û–±—Ä–∞–±–æ—Ç–∫–∞: ${jsonFile}`);
            
            const circuitData = JSON.parse(fs.readFileSync(configPath, 'utf8'));

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
            const apiUrl = 'https://mireatom.mirea.ru/kraniki/circuit/api';
            const auth = {
                username: 'mirxbo@yandex.ru',
                password: '68ae1805cab0d63b268dbdd40cf41aad'
            };

            const response = await axios.post(apiUrl, circuitData, {
                auth,
                headers: {
                    'Content-Type': 'application/json'
                },
                timeout: 15000
            });

            // –°–æ–∑–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "Result_graph_*_car_*.json"
            const outputFilename = this.generateResultFilename(graphFolder, jsonFile);
            const outputPath = path.join(graphResultsDir, outputFilename);

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
            let resultData;
            if (response.data.data && Array.isArray(response.data.data)) {
                resultData = response.data;
            } else if (response.data.status === true && response.data.data && typeof response.data.data === 'object') {
                resultData = {
                    data: Object.entries(response.data.data).map(([bitstring, value]) => ({
                        bitstring,
                        value
                    }))
                };
            } else {
                throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
            }

            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            fs.writeFileSync(outputPath, JSON.stringify(resultData, null, 2));
            console.log(`‚úÖ [${graphFolder}] –£—Å–ø–µ—Ö: ${outputFilename}`);

            return true;

        } catch (error) {
            console.error(`‚ùå [${graphFolder}] –û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ ${jsonFile}:`, error.message);
            
            if (error.response) {
                console.error(`   HTTP —Å—Ç–∞—Ç—É—Å: ${error.response.status}`);
                if (error.response.data) {
                    console.error('   –î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:', JSON.stringify(error.response.data, null, 2));
                }
            }
            
            return false;
        }
    }


    generateResultFilename(graphFolder, originalFilename) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –≥—Ä–∞—Ñ–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏
        const graphMatch = graphFolder.match(/graph_(\d+)/);
        
        if (!graphMatch) {
            // –ï—Å–ª–∏ –∏–º—è –ø–∞–ø–∫–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            const fileNameWithoutExt = originalFilename.replace('.json', '');
            return `Result_${fileNameWithoutExt}.json`;
        }

        const graphNum = graphMatch[1];
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä car –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        const carMatch = originalFilename.match(/_car_(\d+)\.json$/);
        
        if (carMatch) {
            const carNum = carMatch[1];
            return `Result_graph_${graphNum}_car_${carNum}.json`;
        } else {
            // –ï—Å–ª–∏ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –Ω–æ–º–µ—Ä–∞ car, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä –≥—Ä–∞—Ñ–∞
            const fileNameWithoutExt = originalFilename.replace('.json', '');
            return `Result_graph_${graphNum}_${fileNameWithoutExt}.json`;
        }
    }


    async delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }


    getStatus() {
        const graphFolders = fs.existsSync(this.inputDir) ? 
            fs.readdirSync(this.inputDir).filter(item => {
                const itemPath = path.join(this.inputDir, item);
                return fs.statSync(itemPath).isDirectory() && item.startsWith('graph_');
            }).length : 0;

        const pairs = this.createPairs(
            Array.from({length: graphFolders}, (_, i) => `graph_${i}`)
        );

        return {
            isMonitoring: this.isProcessing,
            processedFilesCount: this.processedFiles.size,
            graphFoldersCount: graphFolders,
            estimatedPairs: pairs.length,
            inputDir: this.inputDir,
            resultsDir: this.resultsBaseDir,
            optimizationType: '–ü–æ–ª–Ω–∞—è –ø–æ–ø–∞—Ä–Ω–∞—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å –í–°–ï–• –≥—Ä–∞—Ñ–æ–≤'
        };
    }


    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ (–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ) —Å –ø–æ–ª–Ω–æ–π –ø–æ–ø–∞—Ä–Ω–æ—Å—Ç—å—é
    async processOnce() {
        console.log('üîß –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏...');
        await this.processAllGraphsInPairs();
        this.saveProcessedFiles();
        console.log('‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }


    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–∏—Ö –ø–∞—Ä–∞—Ö
    getCurrentPairs() {
        if (!fs.existsSync(this.inputDir)) {
            return [];
        }

        const availableGraphs = fs.readdirSync(this.inputDir)
            .filter(item => {
                const itemPath = path.join(this.inputDir, item);
                return fs.statSync(itemPath).isDirectory() && item.startsWith('graph_');
            })
            .sort((a, b) => {
                const numA = parseInt(a.replace('graph_', ''));
                const numB = parseInt(b.replace('graph_', ''));
                return numA - numB;
            });

        return this.createPairs(availableGraphs);
    }


    // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    showProcessingStrategy() {
        const pairs = this.getCurrentPairs();
        
        console.log('\nüéØ –°–¢–†–ê–¢–ï–ì–ò–Ø –û–ë–†–ê–ë–û–¢–ö–ò:');
        console.log('=' .repeat(50));
        
        if (pairs.length === 0) {
            console.log('‚ùå –ù–µ—Ç –≥—Ä–∞—Ñ–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
            return;
        }

        pairs.forEach((pair, index) => {
            const pairNumber = index + 1;
            if (pair.length === 2) {
                console.log(`üìå –≠—Ç–∞–ø ${pairNumber}: ${pair[0]} ‚ü∑ ${pair[1]} (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)`);
            } else {
                console.log(`üìå –≠—Ç–∞–ø ${pairNumber}: ${pair[0]} (–æ–¥–∏–Ω–æ—á–Ω–æ)`);
            }
        });
        
        console.log('=' .repeat(50));
        console.log(`‚ö° –í—Å–µ–≥–æ —ç—Ç–∞–ø–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${pairs.length}`);
        console.log(`üöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: –¥–æ ${Math.ceil(pairs.reduce((acc, pair) => acc + pair.length, 0) / pairs.length)}x`);
        console.log('');
    }
}


// –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
const processor = new FullyOptimizedQuantumCircuitProcessor();


// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω SIGINT, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é...');
    processor.stopMonitoring();
    process.exit(0);
});


process.on('SIGTERM', () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω SIGTERM, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é...');
    processor.stopMonitoring();
    process.exit(0);
});


// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∫ –º–æ–¥—É–ª—è
module.exports = processor;


// –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –ø—Ä—è–º–æ–º –∑–∞–ø—É—Å–∫–µ —Ñ–∞–π–ª–∞
if (require.main === module) {
    console.log('üéØ –ó–∞–ø—É—Å–∫ Fully Optimized Quantum Circuit Processor');
    console.log('‚ö° –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –í—Å–µ –≥—Ä–∞—Ñ—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ø–æ–ø–∞—Ä–Ω–æ');
    console.log('üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C');
    console.log('');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processor.showProcessingStrategy();
    
    console.log('üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫:');
    console.log('   input/');
    console.log('   ‚îú‚îÄ‚îÄ graph_0/ ‚Üê –ü–∞—Ä–∞ 1 (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)');
    console.log('   ‚îú‚îÄ‚îÄ graph_1/ ‚Üê –ü–∞—Ä–∞ 1 (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)');
    console.log('   ‚îú‚îÄ‚îÄ graph_2/ ‚Üê –ü–∞—Ä–∞ 2 (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)');
    console.log('   ‚îú‚îÄ‚îÄ graph_3/ ‚Üê –ü–∞—Ä–∞ 2 (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)');
    console.log('   ‚îú‚îÄ‚îÄ graph_4/ ‚Üê –ü–∞—Ä–∞ 3 (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)');
    console.log('   ‚îî‚îÄ‚îÄ graph_5/ ‚Üê –ü–∞—Ä–∞ 3 (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)');
    console.log('');
    console.log('üöÄ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–æ–ª–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:');
    console.log('   ‚Ä¢ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å - –≤—Å–µ –≥—Ä–∞—Ñ—ã –≤ –ø–∞—Ä–∞—Ö');
    console.log('   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä –∏–∑ –ª—é–±–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥—Ä–∞—Ñ–æ–≤');
    console.log('   ‚Ä¢ –£—Å–∫–æ—Ä–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ 2x –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã');
    console.log('   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—á–µ—Ç–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥—Ä–∞—Ñ–æ–≤');
    console.log('   ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –ø–∞—Ä–∞–º');
    console.log('   ‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
    console.log('');
    
    processor.startMonitoring().catch(error => {
        console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    });
}