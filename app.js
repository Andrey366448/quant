// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π
try {
    var axios = require('axios');
} catch (error) {
    console.error('‚ùå –ú–æ–¥—É–ª—å axios –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π:');
    console.error('npm install axios');
    process.exit(1);
}

const fs = require('fs');
const path = require('path');

async function sendQuantumCircuit() {
    try {
        const graphsDir = path.join(__dirname, 'graphs');
        const resultsBaseDir = path.join(__dirname, 'quantum_results');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ graphs
        if (!fs.existsSync(graphsDir)) {
            throw new Error(`–ü–∞–ø–∫–∞ graphs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${graphsDir}`);
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–ø–∫–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if (!fs.existsSync(resultsBaseDir)) {
            fs.mkdirSync(resultsBaseDir);
            console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${resultsBaseDir}`);
        }

        // –ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–ø–∞–ø–æ–∫ –≤ graphs
        const graphFolders = fs.readdirSync(graphsDir)
            .filter(item => {
                const itemPath = path.join(graphsDir, item);
                return fs.statSync(itemPath).isDirectory() && item.startsWith('graph_');
            })
            .sort((a, b) => {
                // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É –≥—Ä–∞—Ñ–∞
                const numA = parseInt(a.replace('graph_', ''));
                const numB = parseInt(b.replace('graph_', ''));
                return numA - numB;
            });

        if (graphFolders.length === 0) {
            throw new Error('–í –ø–∞–ø–∫–µ graphs –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–∞–ø–æ–∫ graph_N');
        }

        console.log(`–ù–∞–π–¥–µ–Ω–æ –≥—Ä–∞—Ñ–æ–≤: ${graphFolders.length}`);

        const results = [];

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –≥—Ä–∞—Ñ–∞
        for (const graphFolder of graphFolders) {
            const graphPath = path.join(graphsDir, graphFolder);
            console.log(`\nüìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä–∞—Ñ–∞: ${graphFolder}`);
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∞
            const graphResultsDir = path.join(resultsBaseDir, graphFolder);
            if (!fs.existsSync(graphResultsDir)) {
                fs.mkdirSync(graphResultsDir, { recursive: true });
            }

            // –ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö JSON —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ –≥—Ä–∞—Ñ–∞
            const jsonFiles = fs.readdirSync(graphPath)
                .filter(file => file.endsWith('.json') && file.includes('api_payload_car_'))
                .sort();

            if (jsonFiles.length === 0) {
                console.log(`‚ùå –í –ø–∞–ø–∫–µ ${graphFolder} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ JSON —Ñ–∞–π–ª–æ–≤ —Å api_payload_car_`);
                continue;
            }

            console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${jsonFiles.length}`);

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ JSON —Ñ–∞–π–ª–∞
            for (const jsonFile of jsonFiles) {
                const configPath = path.join(graphPath, jsonFile);
                console.log(`   üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: ${jsonFile}`);

                try {
                    const circuitData = JSON.parse(fs.readFileSync(configPath, 'utf8'));

                    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
                    const apiUrl = 'https://mireatom.mirea.ru/kraniki/circuit/api';
                    const auth = {
                        username: 'mirxbo@yandex.ru',
                        password: '68ae1805cab0d63b268dbdd40cf41aad'
                    };

                    console.log(`      üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä...`);
                    const response = await axios.post(apiUrl, circuitData, {
                        auth,
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        timeout: 10000
                    });

                    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –º–∞—à–∏–Ω—ã –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                    const carNumberMatch = jsonFile.match(/api_payload_car_(\d+)/);
                    const carNumber = carNumberMatch ? carNumberMatch[1] : 'unknown';

                    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    const outputFilename = `Result_${graphFolder}_car_${carNumber}.json`;
                    const outputPath = path.join(graphResultsDir, outputFilename);

                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
                    let resultData;
                    if (response.data.data && Array.isArray(response.data.data)) {
                        resultData = response.data;
                    } else if (response.data.status === true && response.data.data && typeof response.data.data === 'object') {
                        resultData = {
                            data: Object.entries(response.data.data).map(([bitstring, value]) => ({
                                bitstring,
                                value
                            }))
                        };
                    } else {
                        throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
                    }

                    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                    fs.writeFileSync(outputPath, JSON.stringify(resultData, null, 2));
                    console.log(`      ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${outputFilename}`);

                    results.push({
                        success: true,
                        graph: graphFolder,
                        file: jsonFile,
                        carNumber: carNumber,
                        outputPath: outputPath,
                        data: resultData
                    });

                    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
                    await new Promise(resolve => setTimeout(resolve, 1000));

                } catch (fileError) {
                    console.error(`      ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${jsonFile}:`, fileError.message);
                    
                    if (fileError.response) {
                        console.error('      –°—Ç–∞—Ç—É—Å:', fileError.response.status);
                        if (fileError.response.data) {
                            console.error('      –î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:', JSON.stringify(fileError.response.data, null, 2));
                        }
                    }

                    results.push({
                        success: false,
                        graph: graphFolder,
                        file: jsonFile,
                        error: fileError.message
                    });
                }
            }
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—â–µ–≥–æ —Ñ–∞–π–ª–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        const summary = {
            timestamp: new Date().toISOString(),
            totalProcessed: results.length,
            successful: results.filter(r => r.success).length,
            failed: results.filter(r => !r.success).length,
            results: results.map(r => ({
                graph: r.graph,
                file: r.file,
                carNumber: r.carNumber,
                success: r.success,
                outputPath: r.outputPath || null,
                error: r.error || null
            }))
        };

        const summaryPath = path.join(resultsBaseDir, 'processing_summary.json');
        fs.writeFileSync(summaryPath, JSON.stringify(summary, null, 2));
        console.log(`\nüìä –û–±—â–∏–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${summaryPath}`);

        // –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        console.log('\n=== –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===');
        console.log(`üìÅ –û–±—â–∞—è –ø–∞–ø–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏: ${resultsBaseDir}`);
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${summary.successful}`);
        console.log(`‚ùå –û—à–∏–±–æ–∫: ${summary.failed}`);
        console.log(`üìä –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${summary.totalProcessed}`);
        
        if (summary.failed > 0) {
            console.log('\nüìã –û—à–∏–±–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã:');
            results.filter(r => !r.success).forEach(r => {
                console.log(`   - ${r.graph}/${r.file}: ${r.error}`);
            });
        }

        console.log(`\nüéØ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:`);
        console.log(`   ${resultsBaseDir}/`);
        graphFolders.forEach(folder => {
            const resultFiles = results.filter(r => r.graph === folder && r.success);
            console.log(`   ‚îú‚îÄ‚îÄ ${folder}/ (${resultFiles.length} —Ñ–∞–π–ª–æ–≤)`);
        });
        console.log(`   ‚îî‚îÄ‚îÄ processing_summary.json`);

        return summary;

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);

        if (error.response) {
            console.error('–°—Ç–∞—Ç—É—Å:', error.response.status);
            console.error('–î–∞–Ω–Ω—ã–µ:', error.response.data);
        }

        return {
            success: false,
            error: error.message
        };
    }
}

function pad(num) {
    return num.toString().padStart(2, '0');
}

module.exports = { sendQuantumCircuit };

if (require.main === module) {
    sendQuantumCircuit();
}
