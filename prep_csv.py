import csv
import ast
import math

def format_with_newlines(obj):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫ –∏ –∑–∞–ø—è—Ç—ã—Ö
    """
    def format_list(lst, indent=0):
        if not lst:
            return "[]"
        
        spaces = " " * indent
        result = "[\n"
        
        for i, item in enumerate(lst):
            if isinstance(item, list):
                formatted_item = format_list(item, indent + 2)
            else:
                formatted_item = str(item)
            
            result += spaces + "  " + formatted_item
            if i < len(lst) - 1:
                result += ","
            result += "\n"
        
        result += spaces + "]"
        return result
    
    if isinstance(obj, list):
        return format_list(obj)
    else:
        return str(obj)

def process_data_file(input_csv, output_matrices, output_routes):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç CSV —Ñ–∞–π–ª —Å –º–∞—Ç—Ä–∏—Ü–∞–º–∏ –∏ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏, —Ä–∞–∑–¥–µ–ª—è–µ—Ç –∏—Ö –≤ —Ä–∞–∑–Ω—ã–µ —Ñ–∞–π–ª—ã
    —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    """
    matrices = []
    routes = []    
    processed_count = 0
    
    try:
        with open(input_csv, 'r', encoding='utf-8') as f:
            reader = csv.reader(f)
            next(reader)  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            
            for row_num, row in enumerate(reader, 1):
                if len(row) >= 3:
                    try:
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É
                        matrix_str = row[1].strip()
                        
                        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∫–∞–≤—ã—á–∫–∏
                        if matrix_str.startswith('"') and matrix_str.endswith('"'):
                            matrix_str = matrix_str[1:-1]
                        if matrix_str.startswith('"') and matrix_str.endswith('"'):
                            matrix_str = matrix_str[1:-1]
                        
                        # –ó–∞–º–µ–Ω—è–µ–º inf –Ω–∞ math.inf –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
                        matrix_str = matrix_str.replace('inf', 'math.inf')
                        
                        # –ü–∞—Ä—Å–∏–º –º–∞—Ç—Ä–∏—Ü—É
                        matrix_data = eval(matrix_str, {'math': math})
                        matrices.append(matrix_data)
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
                        routes_str = row[2].strip()
                        
                        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∫–∞–≤—ã—á–∫–∏
                        if routes_str.startswith('"') and routes_str.endswith('"'):
                            routes_str = routes_str[1:-1]
                        if routes_str.startswith('"') and routes_str.endswith('"'):
                            routes_str = routes_str[1:-1]
                        
                        # –ü–∞—Ä—Å–∏–º –º–∞—Ä—à—Ä—É—Ç—ã
                        routes_data = ast.literal_eval(routes_str)
                        routes.append(routes_data)
                        
                        processed_count += 1
                        
                    except (SyntaxError, ValueError, NameError) as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ {row_num}: {e}")
                        continue
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ç—Ä–∏—Ü—ã –≤ —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        with open(output_matrices, 'w', encoding='utf-8') as f:
            if matrices:
                formatted = format_with_newlines(matrices)
                f.write(formatted)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –≤ —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        with open(output_routes, 'w', encoding='utf-8') as f:
            if routes:
                formatted = format_with_newlines(routes)
                f.write(formatted)
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count} –∑–∞–ø–∏—Å–µ–π")
        print(f"üìä –ú–∞—Ç—Ä–∏—Ü—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_matrices}")
        print(f"üõ£Ô∏è  –ú–∞—Ä—à—Ä—É—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_routes}")
        
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {input_csv} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
def process_data_file_simple(input_csv, output_matrices, output_routes):
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –±–∞–∑–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    """
    matrices = []
    routes = []    
    processed_count = 0
    
    try:
        with open(input_csv, 'r', encoding='utf-8') as f:
            reader = csv.reader(f)
            next(reader)
            
            for row_num, row in enumerate(reader, 1):
                if len(row) >= 3:
                    try:
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É
                        matrix_str = row[1].strip()
                        if matrix_str.startswith('"') and matrix_str.endswith('"'):
                            matrix_str = matrix_str[1:-1]
                        matrix_str = matrix_str.replace('inf', 'math.inf')
                        matrix_data = eval(matrix_str, {'math': math})
                        matrices.append(matrix_data)
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
                        routes_str = row[2].strip()
                        if routes_str.startswith('"') and routes_str.endswith('"'):
                            routes_str = routes_str[1:-1]
                        routes_data = ast.literal_eval(routes_str)
                        routes.append(routes_data)
                        
                        processed_count += 1
                        
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ {row_num}: {e}")
                        continue
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ç—Ä–∏—Ü—ã —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
        with open(output_matrices, 'w', encoding='utf-8') as f:
            f.write('[')
            for i, matrix in enumerate(matrices):
                if i > 0:
                    f.write(',')
                f.write('\n')
                f.write(str(matrix).replace('], [', '],\n [').replace(']], [[', ']],\n\n [['))
            f.write('\n]')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
        with open(output_routes, 'w', encoding='utf-8') as f:
            f.write('[')
            for i, route in enumerate(routes):
                if i > 0:
                    f.write(',')
                f.write('\n')
                f.write(str(route).replace('], [', '],\n [').replace(']], [[', ']],\n\n [['))
            f.write('\n]')
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count} –∑–∞–ø–∏—Å–µ–π")
        print(f"üìä –ú–∞—Ç—Ä–∏—Ü—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_matrices}")
        print(f"üõ£Ô∏è  –ú–∞—Ä—à—Ä—É—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_routes}")
        
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if __name__ == "__main__":
    # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ —Ñ–∞–π–ª—ã
    input_file = "data.csv"          # –í–∞—à –∏—Å—Ö–æ–¥–Ω—ã–π CSV —Ñ–∞–π–ª
    matrices_output = "G_set1.txt"    # –§–∞–π–ª –¥–ª—è –º–∞—Ç—Ä–∏—Ü
    routes_output = "routes1.txt"     # –§–∞–π–ª –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
    
    # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–≤—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    # –∏–ª–∏ –≤—Ç–æ—Ä—É—é –¥–ª—è –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–≥–æ
    process_data_file_simple(input_file, matrices_output, routes_output)